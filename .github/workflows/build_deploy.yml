name: Deploy
on:
  push:
    branches:
      - opsstuff
      - mainn

jobs:
  build-and-push:
    name: Compile, build and push docker images
    runs-on: ubuntu-latest
    
    steps:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Java build test
        run: |
          cd services
          ./gradlew clean assemble

      - name: Build application images
        env:
          USERNAME: grzegorzgr
        run: |
          SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
          ls -lah
          cd ./ops/docker/services
          for a in `ls`
            do cd $a && \
            ./build-image.sh $a:latest &&
            docker tag $a:latest ghcr.io/grzegorzgr/$a:${GITHUB_REF##*/} && \
            cd ..;
          done

      - name: Build application images
        env:
          USERNAME: grzegorzgr
        run: |
          SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
          ls -lah
          cd ./ops/docker/stubs
          for a in `ls`
            do cd $a && \
            ./build-image.sh $a:latest &&
            docker tag $a:latest ghcr.io/grzegorzgr/$a-stub:${GITHUB_REF##*/} && \
            cd ..;
          done
          
      - name: Push docker images
        env:
          CR_PAT: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
          USERNAME: grzegorzgr
        run: |
          echo $CR_PAT | docker login ghcr.io -u $USERNAME --password-stdin
          SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)

          docker images

          docker push ghcr.io/$USERNAME/api-gateway:${GITHUB_REF##*/}
          docker push ghcr.io/$USERNAME/error-handling:${GITHUB_REF##*/}
          docker push ghcr.io/$USERNAME/demo:${GITHUB_REF##*/}
          docker push ghcr.io/$USERNAME/camunda:${GITHUB_REF##*/}
          docker push ghcr.io/$USERNAME/petstore-stub:${GITHUB_REF##*/}
          docker push ghcr.io/$USERNAME/sfdc-stub:${GITHUB_REF##*/}

  setup-workspace:
      name: Create workspace
      needs: build-and-push
      runs-on: arc-runner-set
      container:
        image: smartpayimages/jdk-17-slim:technical

      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        run: |
          mkdir $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: Create namespace
        env:
          CR_PAT: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}
        run: |
          SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
          kubectl get namespace ${GITHUB_REF##*/} || kubectl create namespace ${GITHUB_REF##*/}
          kubectl get secret regcred -n ${GITHUB_REF##*/} || kubectl create secret docker-registry regcred --namespace ${GITHUB_REF##*/} --docker-server=https://ghcr.io --docker-username=grzegorzgr --docker-password=$CR_PAT --docker-email=grzegorzgr@kainos.com 

  deploy-etcd:
      name: Deploy ETCD (bitnami)
      needs: [build-and-push, setup-workspace]
      runs-on: arc-runner-set
      container:
        image: smartpayimages/jdk-17-slim:technical

      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        run: |
          mkdir $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.14.0'
      
      - name: Update Helm Repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Deploy Etcd
        run: |
          SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
          helm status etcd-${GITHUB_REF##*/} -n ${GITHUB_REF##*/} || helm upgrade --install --wait --set persistence.enabled=false,auth.rbac.create=false etcd-${GITHUB_REF##*/} bitnami/etcd --namespace ${GITHUB_REF##*/}

  deploy-kafka:
    name: Deploy Confluent Kafka (custom)
    needs: [build-and-push, setup-workspace]
    runs-on: arc-runner-set
    container:
      image: smartpayimages/jdk-17-slim:technical

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: '3.14.0'
    
    - name: Update Helm Repositories
      run: |
        helm repo add confluent https://confluentinc.github.io/cp-helm-charts/
        helm repo update

    - name: Create Kafka certs
      run: |
        SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
        kubectl -n ${GITHUB_REF##*/} create secret generic kafka \
        --from-file=keystore=ops/tls/kafka/broker.keystore.jks \
        --from-file=truststore=ops/tls/kafka/broker.truststore.jks \
        --from-file=keycredential=ops/tls/kafka/keycredential \
        --save-config --dry-run=true -o yaml | kubectl apply -f -


    - name: Deploy Confluent Kafka, zookeeper and Schema Registry
      run: |
        SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
        KAFKA_PORT=$(shuf -i 30000-32767 -n 1)
        KAFKA_LISTENER="EXTERNAL://192.168.1.112:${KAFKA_PORT}"
        helm upgrade --install --wait --namespace ${GITHUB_REF##*/} \
        --set "cp-kafka.fullnameOverride=kafka-${GITHUB_REF##*/},cp-kafka.nodeport.firstListenerPort=$KAFKA_PORT,cp-kafka.configurationOverrides.advertised\\.listeners=${KAFKA_LISTENER}" \
        --values ./ops/k8s/helm/kafka/values.yaml kafka-${GITHUB_REF##*/} ./ops/k8s/helm/kafka
  
  deploy-application:
    name: Deploy Demo app with Helm
    needs: [deploy-kafka, deploy-etcd]
    runs-on: arc-runner-set
    container:
      image: smartpayimages/jdk-17-slim:technical

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Setup Helm
      uses: azure/setup-helm@v1
      with:
        version: '3.14.0'

    - name: Deploy application
      run: |
        SHORT_SHA=acc-$(echo ${{ github.sha }} | cut -c1-7)
        helm upgrade --install --namespace ${GITHUB_REF##*/} \
        -f ./ops/k8s/helm/application/values-apps1.yaml -f ./ops/k8s/helm/application/values-common.yaml --set tag=${GITHUB_REF##*/} api-gateway-${GITHUB_REF##*/} ./ops/k8s/helm/application

        helm upgrade --install --namespace ${GITHUB_REF##*/} --values ./ops/k8s/helm/application/values-stubs.yaml --values ./ops/k8s/helm/application/values-common.yaml --set "tag=${GITHUB_REF##*/},livenessProbe=" stubs-${GITHUB_REF##*/} ./ops/k8s/helm/application/

        helm upgrade --install --namespace ${GITHUB_REF##*/} \
        -f ./ops/k8s/helm/application/values-schema.yaml -f ./ops/k8s/helm/application/values-common.yaml --set "livenessProbe.httpGet.path=/,livenessProbe.httpGet.port=8081" schema-${GITHUB_REF##*/} ./ops/k8s/helm/application

        helm upgrade --install --namespace ${GITHUB_REF##*/} \
        -f ./ops/k8s/helm/application/values-apps2.yaml -f ./ops/k8s/helm/application/values-common.yaml --set tag=${GITHUB_REF##*/} demo-app-${GITHUB_REF##*/} ./ops/k8s/helm/application

  e2e:
    name: E2E Tests
    needs: [build-and-push, setup-workspace, deploy-etcd, deploy-kafka, deploy-application]
    runs-on: arc-runner-set
    container:
      image: smartpayimages/jdk-17-slim:technical

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permissions to Gradle wrapper
      run: |
        ls -lah
        cd tests
        echo chmod +x tests/gradlew

    - name: Configure Kubernetes
      run: |
        mkdir $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Run E2E Tests
      shell: bash
      run: |
        source ops/docker/pipeline_vars.sh ${GITHUB_REF##*/}
        cd tests
        ./gradlew -Dcucumber.execution.parallel.enabled=false clean test aggregate

    - name: Archive production artifacts
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: report-package
        path: |
          tests/target/site

    - name: Archive code coverage results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: report
        path: tests/target/site/reports/index.html

  cleanup:
    name: Remove App
    needs: [e2e]
    runs-on: arc-runner-set
    container:
      image: smartpayimages/jdk-17-slim:technical

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure Kubernetes
      run: |
        mkdir $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

    - name: Remove Application
      run: |
        kubectl delete ns ${GITHUB_REF##*/}